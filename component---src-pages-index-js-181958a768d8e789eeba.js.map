{"version":3,"file":"component---src-pages-index-js-181958a768d8e789eeba.js","mappings":"qMAmIA,EApGoB,WAmDlB,IAlDA,IAAMA,GAAOC,EAAAA,EAAAA,gBAAe,aAiDtBC,EAAO,GACJC,EAAI,EAAGA,EAAIH,EAAKE,KAAKE,MAAMC,OAAQF,IAAK,CAC/C,IAAMG,EAAUN,EAAKE,KAAKE,MAAMD,GAAGI,KAAKC,KAAKC,MAAM,KAAK,GACnDP,EAAKI,KAAUJ,EAAKI,GAAW,IACpCJ,EAAKI,GAASI,KAAKV,EAAKE,KAAKE,MAAMD,GAAGI,KAAKI,iBAG7C,IAAMC,EAASZ,EAAKa,QAAQC,MAAMC,MAAK,SAACC,EAAGC,GACzC,OAAO,IAAIC,KAAKD,EAAEE,KAAK,IAAM,IAAID,KAAKF,EAAEG,KAAK,OAG/C,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKC,MAAM,2BACVR,EAAOS,KAAI,SAAAP,GACV,IAAMK,EAAO,IAAID,KAAKJ,EAAMK,KAAK,IACjC,OACE,2BACE,wBAAMG,UCjGM,qCDmGR,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAC7GH,EAAKI,YAEP,IACDJ,EAAKK,UANR,KAMqBL,EAAKM,eAE1B,2BACA,uBAAKH,UC7FS,uCD8FXR,EAAMV,MACJW,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAET,KAAKmB,OAAOC,MAAQV,EAAEV,KAAKmB,OAAOC,SACnDN,KAAI,SAAAO,GACH,IAxGH,EAAEC,EAAMC,EAAOC,EAAMV,EAwGZW,EAAY9B,EAAK0B,EAAKrB,KAAKc,MAAQnB,EAAI,KACvC+B,GAASL,EAAKrB,KAAKmB,OAAOC,MAAQ,IAAIO,UAAYF,EAAU3B,OAElE,OA3GH,EA2GgB,CACXwB,KAAMD,EAAKrB,KAAKmB,OAAOG,KACvBE,KAAMH,EAAKrB,KAAKmB,OAAOK,KACvBV,IAAKO,EAAKrB,KAAKc,IACfS,OAAOK,EAAAA,EAAAA,GAASH,EAAUC,IAC1BG,UAAWR,EAAKrB,KAAK8B,OAAOD,WAhH/BP,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,KAAMV,EAAqB,EAArBA,IAAqB,EAAhBe,UAErC,qBAAGE,IAAKT,EAAMU,KAAI,SAAWV,GAC3B,uBAAKP,UCVY,oCDWf,gBAAC,EAAAkB,EAAD,CAAalB,UCCK,sCDD+BmB,aCEnC,kCDFsEX,MAAOA,EAAOY,UAAU,QAAQC,IAAI,KACxH,uBAAKrB,UCTc,wCDUjB,uBAAKA,UAAWS,EAAKa,IAAIC,MAAQd,EAAKe,KAAKD,MCP5B,qCADC,uCDSd,uBAAKvB,UCPI,kCDQP,4BAAOD,EAAI0B,eACX,wBAAMzB,UCRQ,yCDQ+BS,EAAKa,IAAII,QAAtD,KAAiEjB,EAAKe,KAAKE,UAG7E,uBAAK1B,UCRQ,sCDQb,QACA,uBAAKA,UCXS,uCDW4BS,EAAKa,IAAIC,OACnD,uBAAKvB,UCXS,uCDWd,SACA,uBAAKA,UCpBU,wCDoB4BS,EAAKe,KAAKD","sources":["webpack://qtube/./src/pages/index.js","webpack://qtube/./src/pages/matches.module.scss"],"sourcesContent":["import * as React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\nimport * as matchStyle from \"./matches.module.scss\"\n\nconst Match = ({ slug, image, team, map, directory }) => {\n  return (\n    <a key={slug} href={`match/${slug}`}>\n      <div className={matchStyle.container}>\n        <GatsbyImage className={matchStyle.mapContainer} imgClassName={matchStyle.mapImage} image={image} objectFit=\"scale\" alt=\"\" />\n        <div className={matchStyle.infoContainer}>\n          <div className={team.red.frags > team.blue.frags ? matchStyle.infoGridRed : matchStyle.infoGridBlue}>\n            <div className={matchStyle.infoMap}>\n              <span>{map.toUpperCase()}</span>\n              <span className={matchStyle.infoNumPlayers}>{team.red.players}on{team.blue.players}</span>\n            </div>\n            \n            <div className={matchStyle.infoTeamRed}>Red:</div>\n            <div className={matchStyle.infoRedFrags}>{team.red.frags}</div>\n            <div className={matchStyle.infoTeamBlue}>Blue:</div>\n            <div className={matchStyle.infoBlueFrags}>{team.blue.frags}</div>\n          </div>\n        </div>\n      </div>\n    </a>\n  )\n}\n\nconst MatchesPage = () => {\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      matches: allMatchJson {\n        group(field: fields___sort_date) {\n          date: distinct(field: fields___date)\n          edges {\n            node {\n              demo\n              id\n              map\n              date\n              fields {\n                slug\n                sort_date\n                epoch\n                team {\n                  red {\n                    frags\n                    players\n                  }\n                  blue {\n                    frags\n                    players\n                  }\n                }\n              }\n              duration\n              parent {\n                ... on File {\n                  directory: relativeDirectory\n                }\n              }\n            }\n          }\n        }\n      }\n      maps: allFile(filter: { dir: { regex: \"//maps//\" } }) {\n        edges {\n          node {\n            childImageSharp {\n              gatsbyImageData(width: 500, formats: PNG)\n            }\n            name\n          }\n        }\n      }\n    }\n  `)\n\n  const maps = {}\n  for (let i = 0; i < data.maps.edges.length; i++) {\n    const mapName = data.maps.edges[i].node.name.split(\".\")[0]\n    if (!maps[mapName]) maps[mapName] = []\n    maps[mapName].push(data.maps.edges[i].node.childImageSharp)\n  }\n\n  const sorted = data.matches.group.sort((a, b) => {\n    return new Date(b.date[0]) - new Date(a.date[0])\n  })\n\n  return (\n    <Layout>\n      <Seo title=\"QuakeWorld CTF Matches\" />\n      {sorted.map(group => {\n        const date = new Date(group.date[0])\n        return (\n          <div>\n            <span className={matchStyle.dateHeader}>\n              {\n                [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"][\n                  date.getMonth()\n                ]\n              }{\" \"}\n              {date.getDate()}, {date.getFullYear()}\n            </span>\n            <br />\n            <div className={matchStyle.matchListing}>\n              {group.edges\n                .sort((a, b) => a.node.fields.epoch - b.node.fields.epoch)\n                .map(edge => {\n                  const mapImages = maps[edge.node.map] || maps[\"e2m2\"] // TODO: Add more screenshots\n                  const index = (edge.node.fields.epoch / 60).toFixed() % mapImages.length\n\n                  return Match({\n                    slug: edge.node.fields.slug,\n                    team: edge.node.fields.team,\n                    map: edge.node.map,\n                    image: getImage(mapImages[index]),\n                    directory: edge.node.parent.directory\n                  })\n                })}\n            </div>\n          </div>\n        )\n      })}\n    </Layout>\n  )\n}\n\nexport default MatchesPage\n","// extracted by mini-css-extract-plugin\nexport var container = \"matches-module--container--ukG+x\";\nexport var dateHeader = \"matches-module--dateHeader--6jPze\";\nexport var infoBlueFrags = \"matches-module--infoBlueFrags--7eAUA\";\nexport var infoContainer = \"matches-module--infoContainer--OqR3U\";\nexport var infoGrid = \"matches-module--infoGrid--WMEVm\";\nexport var infoGridBlue = \"matches-module--infoGridBlue--df2xO\";\nexport var infoGridRed = \"matches-module--infoGridRed--TwmO-\";\nexport var infoMap = \"matches-module--infoMap--+6EKL\";\nexport var infoNumPlayers = \"matches-module--infoNumPlayers--fWzHV\";\nexport var infoRedFrags = \"matches-module--infoRedFrags--ICJN1\";\nexport var infoTeamBlue = \"matches-module--infoTeamBlue--htOeS\";\nexport var infoTeamRed = \"matches-module--infoTeamRed--+kek1\";\nexport var mapContainer = \"matches-module--mapContainer--9BbS3\";\nexport var mapImage = \"matches-module--mapImage--0CBZS\";\nexport var matchListing = \"matches-module--matchListing--HSX+x\";"],"names":["data","useStaticQuery","maps","i","edges","length","mapName","node","name","split","push","childImageSharp","sorted","matches","group","sort","a","b","Date","date","title","map","className","getMonth","getDate","getFullYear","fields","epoch","edge","slug","image","team","mapImages","index","toFixed","getImage","directory","parent","key","href","G","imgClassName","objectFit","alt","red","frags","blue","toUpperCase","players"],"sourceRoot":""}